\documentclass[article]{jss}

%% -- LaTeX packages and custom commands ---------------------------------------

%% recommended packages
\usepackage{orcidlink,thumbpdf,lmodern}

%% another package (only for this demo article)
\usepackage{framed}

%% new custom commands
\newcommand{\class}[1]{`\code{#1}'}
\newcommand{\fct}[1]{\code{#1()}}

%% For Sweave-based articles about R packages:
%% need no \usepackage{Sweave}
\SweaveOpts{engine=R, eps=FALSE, keep.source = TRUE, width=7, height=5, out.width='0.1\\textwidth'}

<<preliminaries, echo=FALSE, results=hide>>=
options(prompt = "R> ", continue = "+  ", width = 60, useFancyQuotes = FALSE)
library("MASS")
library("plotrix")
library("ggplot2")
library("utils")
library("visualFields")
@


%% -- Article metainformation (author, title, ...) -----------------------------

\author{Cord Huchzermeyer~\orcidlink{0000-0002-0408-8981}\\Department of Ophthalmology\\University Hospital Erlangen
   \And Iván Marín-Franch\\Computational Optometry}
\Plainauthor{Cord Huchzermeyer, Iván Marín-Franch}

\title{visualFields 1.0.7: Tools for Analyzing Visual Fields in \proglang{R}}
\Plaintitle{visualFields 1.0.7: Tools for Analyzing Visual Fields in R}
\Shorttitle{visualFields 1.0.7 in \proglang{R}}

\Abstract{
  The \pkg{visualFields} package is part of the Open Perimetry Initiative (OPI), 
  a standard for interfacing with visual field testing machines. This article 
  introduces the package, which provides tools for analyzing the field of vision, 
  including visualization, statistical analysis, and clinical interpretation of 
  visual-field loss and its progression over time.
}

\Keywords{visualFields, Open Perimetry Initiative, visual field analysis, \proglang{R}}
\Plainkeywords{visualFields, Open Perimetry Initiative, visual field analysis, R}

\Address{
  Cord Huchzermeyer\\
  Department of Ophthalmology, University Hospital Erlangen \\
  E-mail: \email{c.huchzermeyer@posteo.de}\\
  \\
  Iván Marín-Franch\\
  Computational Optometry\\
  E-mail: \email{ivan@example.com}\\
  URL: \url{https://www.computationaloptometry.com/}
}

\begin{document}
%%\SweaveOpts{concordance=TRUE}
%\lstset{breaklines=true, breakatwhitespace=true}


%% -- Introduction -------------------------------------------------------------

\section[Introduction: Visual Fields in R]{Introduction: Visual Fields} \label{sec:intro}

The Open Perimetry Initiative (OPI) \citep{IMF:Tur2012, IMF:Marin2022a} provides an open standard for interfacing with visual field testing devices (perimeters). It defines a set of core functions that enable the construction of a wide range of visual field tests. As of October 2017, OPI has been fully implemented on the Octopus 900 and partially supports the Heidelberg Edge Perimeter, Kowa AP 7000, CrewT IMO, and Centervue Compass.

The \pkg{visualFields} package, developed as part of the OPI ecosystem, provides a suite of tools for the statistical analysis and visualization of visual field data. It offers a flexible framework to support the development and application of innovative methods for analyzing visual field loss and its progression over time, with applications in both research and clinical settings.
\subsection{What is the visual field?}

The visual field refers to the entire area that can be seen at a given moment, encompassing both central and peripheral vision. It is typically measured in degrees of visual angle, with the fixation point defined as the origin at $x = 0^\circ$ and $y = 0^\circ$. Locations temporal and superior to fixation are assigned positive angles, whereas nasal and inferior locations are assigned negative angles.

In healthy vision, most visual functions, particularly light sensitivity, decline with increasing eccentricity—i.e., distance from the center of fixation. This decline in differential light sensitivity gives rise to a three-dimensional structure known as the hill of vision, also referred to as Traquair’s island of vision \citep{IMF:Traquair1938}. Figure~\ref{fig:hill} below shows a classic rendering of the hill of vision by Aulhorn and Harms \citep{IMF:Aul1967}.

\begin{figure}[t!]
\centering
\includegraphics[width=0.9\textwidth]{Figure1.pdf}
\caption{\label{fig:hill} Perimetry. A) A (manual) perimeter with an inset showing the stimulus enlarged. B) The hill of vision.}
\end{figure}

\subsection{What is perimetry?}

\emph{Perimetry} (visual field testing) uses psychophysical methods to quantify the visual field by measuring a patient's sensitivity to light differences at various locations within the field. Psychophysical tests allow for the scientific measurement of the relationship between physical stimulus strength and subjective perception. This is achieved by systematically varying the stimulus strength across discrete trials based on the observer's responses. The observer is typically restricted to a limited set of responses, and the stimuli are varied according to a predefined algorithm.

In visual field testing, the observer responds by either pressing or not pressing a button within a fixed time window following the presentation of a light increment in the visual field (a yes/no response). The relationship between stimulus strength and response probability is modeled by a \emph{psychometric function}, which characterizes the likelihood of a "yes" response as a function of stimulus strength \citep{CH:knoblauch_modeling_2012}. These models yield an estimate of the threshold, defined as the stimulus strength at which the observer detects the stimulus with a probability of 50\%.

The most straightforward method for estimating this threshold is the method of constant stimuli, in which stimuli are presented multiple times at several discrete, fixed intensities around the anticipated threshold. This approach yields an accurate estimate of the psychometric function, which is typically modeled using a cumulative distribution function (CDF), such as the Gaussian CDF. However, this method is inefficient and requires a large number of trials, since stimulus levels far from the threshold provide little information. Long test durations negatively affect attention, thereby reducing both the accuracy and precision of the threshold estimates.

To improve efficiency, adaptive algorithms have been developed to reduce the number of stimulus presentations with minimal compromise in accuracy. A commonly used example is the staircase algorithm, in which the stimulus intensity decreases after a "seen" response and increases after a "not seen" response. The step size is halved after each reversal (i.e., a change in response direction). More sophisticated algorithms balance precision and test duration, often incorporating information from adjacent locations in the visual field. A notable example is the \emph{Swedish Interactive Threshold Algorithm (SITA)} used in the Humphrey Field Analyzer.

At the conclusion of the test, the perimetric sensitivity is recorded in a logarithmic decibel (dB) scale based on the luminance of the stimulus at threshold ($L_{threshold}$). In perimetry, luminance is usually reported in apostilbs rather than $cd/m^2$, where $1 asb = \frac{1}{\pi} cd/m^2$. This scale is defined as the attenuation from the maximum possible stimulus contrast, $L_{max}$:

\begin{equation}
dB = 10\ \rm log \left (\frac{L_{\rm max}}{L_{\rm threshold}} \right)\ .
\end{equation}

$L_{max}$ may differ between parameter types, and the Humphrey Field Analyzer uses 10{,}000\,asb, whereas recent Octopus 900 perimeters commonly use 4000\,asb \citep{CH:racette_visual_nodate}.

The visualFields package was developed to analyze data from static perimetry, where thresholds are measured at fixed, discrete locations in the visual field. Kinetic perimetry, in which a stimulus of constant luminance is moved across the field to identify isosensitivity contours, is outside the scope of this package.

Static perimetry aims to estimate the hill of vision as accurately as possible within the constraints of clinical practice. The most common form is standard automated perimetry (SAP), which is performed inside a dome-shaped device (a Ganzfeld perimeter) to ensure a uniform distance between the eye and all stimulus locations. In contrast, campimetry uses a flat screen and may become more common with the increasing availability of computer screens and virtual reality devices for telemedicine.

For analyzing visual field data, the package provides the following functionality:
\begin{itemize}
  \item A format for representing visual field data
  \item Functions for importing data from perimeters
  \item Functions for reading and writing data in CSV format, and for handlings data
  \item A format for representing the underlying spatial pattern ({data(locmaps)})
  \item A format for representing age-corrected normal values ({data(normvals)}), including probabilities
  \item Functions for calculating total deviation (TD), pattern deviation (PD), and global indices
  \item Functions for calculating probabilities of TD and PD
  \item A format for representing parameters for plotting the visual fields ({data(gpars)})
  \item Functions for plotting visual fields, including longitudinal analyses of visual field series
  \item Functions for calculating structural parameters pertinent to visual field testing (Jansonius maps, ganglion cell displacement)
\end{itemize}

By default, the package is set up to handle Humphrey Field Analyzer 24-2 visual fields. It is recommended to use such data for exploring the package and data is provided by the package. However, other patterns and devices can be used. The package also contains all necessary data for the HFA 10-2 pattern. However, the package is designed to be extensible, allowing users to add new patterns, devices, and normative datasets. 

%% -- Methods ------------------------------------------------------------------

\section{Humphrey Field Analyser 24-2 pattern} \label{sec:methods}

In this section, we will show how to install and load the package, and how the data supplied by the package can be analyzed with the default environment settings. In the following sections, we will show how to plot the data, perform longitudinal and cross-sectional analyses, how to import data from perimeters, and how to set up the environmnent for these data.

\subsection{Installation}

The \pkg{visualFields} package is available from CRAN under the Apache 2.0 license and can be installed with:

<<eval=FALSE>>=
install.packages("visualFields")
@

The latest development version can be installed from GitHub using:

<<eval=FALSE>>=
library(devtools)
install_github("imarinfr/vf1/source")
@

\subsection{Visual field data}

The most important data are the perimetry results. However, the environment needs to be set up correctly for the corresponding type of perimetry. Here, we start with data from a Humphrey Field Analyser (HFA) with the 24-2 pattern that is supplied by the package (\code{data(vfpwgSunyiu24d2)}), and demonstrate how the data is structured and what environment settings are used. The default environment settings are aimed at the HFA 24-2, and they can always be reset with \code{setdefaults()}. The data is from a glaucoma patient (\code{vfpwgSunyiu24d2}) and consists of 42 consecutive visual field tests.

<<>>=
data(vfpwgSunyiu24d2)
str(vfpwgSunyiu24d2[, 1:10], strict.width = "wrap")
@

The first ten columns contain metadata for each test, including reliability indices. The remaining columns contain the actual test values (sensitivities) at the locations defined in the \code{locmap}. The \code{date} variable is stored as a \code{POSIXct} object, which can be converted to a date format using the \code{as.Date()} function. Each row represents a monocular test. The \code{type} variable allows assignment of tests to different groups. The eye is labeled using Latin abbreviations: 

\begin{description}
\item [OD: oculus dexter] right eye
\item [OS: oculus sinister] left eye
\item [OU: oculus uterque] both eyes
\end{description}

\subsubsection{Reliability indices}

Deviations from the expected psychometric function may arise due to observer inattention or short-term threshold fluctuations. In diseases like glaucoma, short-term variability is often elevated in damaged regions of the visual field. Response quality is typically assessed by following metrics and these help to assess the reliability of a test. :

\begin{description}
  \item [False negatives (FNR)] Missed responses to stimuli that were previously seen.
  \item [False positives (FPR)] Responses when no stimulus is presented when the patients expects a presentation from the rhythm of the exam
  \item [Fixation losses] Responses to stimuli presented within the blind spot
\end{description}

\subsubsection{Local sensitivities}

Actual test values (sensitivities) begin at the column number stored in the \code{locini} variable of the environment. The function \code{getvfcols()} returns the numbers of the columns that contain the actual test values at the locations $l_{1}$ to $l_{n}$, where n corresponds to the number of locations tests (n = 54 for the 24-2 pattern).

<<>>=
getlocini()
vfpwgSunyiu24d2[1, getvfcols()]
@

No columns should appear after these test values. Use \code{vffilter()} to select specific tests and \code{vfisvalid()} to verify data structure:

<<>>=
example1 <- vffilter(vfpwgSunyiu24d2, id == "sample1" & eye == "OD")[1, ]
example1$newVariable <- "invalid"
vfisvalid(example1) 
@

Here, the visual field data is not value, because an illegal column was added. The \code{vfread()} and \code{vfread()} functions can be used to read and write data in this format from a CSV file, but they cannot be used to import native data from the perimeters. 

The following functions can be used to import data from perimeters.

\begin{itemize}
  \item \code{loadhfaxml()}, \code{loadhfadicom()}, \code{loadhfaxmlbatch()}, \code{loadhfadicombatch()} for the Humphrey Field Analyzer (Carl Zeiss Meditec, Dublin, CA, USA)
  \item \code{loadoctopus()} for Octopus 900 (Haag-Streit, Köniz, Switzerland)
\end{itemize}

\subsection{Grid patterns}

Test locations are defined by location maps (\code{locmaps}), which specify the spatial coordinates of stimulus presentation points in degrees of visual angle. These maps reflect the layout used by visual field testing devices. When analyzing data, the correct \code{locmap} must be specified.

<<>>=
data(locmpas)
names(locmaps)
@

By default, the \code{24-2} pattern is used, consisting of 54 regularly spaced locations across the central visual field.

<<>>=
default_locmap <- getlocmap()
str(default_locmap, strict.width = "wrap")
@

Each \code{locmap} contains:
\begin{itemize}
  \item A coordinate table with $x$- and $y$-positions (in degrees),
  \item A vector \code{bs} indicating locations corresponding to the physiological blind spot.
\end{itemize}

If the blind spot is outside the tested region (e.g., in the 10-2 pattern) or is skipped (e.g., in the Octopus G1), \code{bs} is set to \code{numeric(0)}.

\subsection{Normative data}

Sensitivity is measured in decibels (dB), derived from contrast thresholds. Sensitivity varies:
\begin{itemize}
  \item Intra-individually (test-retest variability),
  \item Inter-individually (e.g., with age),
  \item By eccentricity.
\end{itemize}

To detect abnormal points, we compare observed sensitivities with an age-corrected mean normal field. These comparisons require a \emph{normative dataset} and location-wise \emph{age-linear models}.

The difference between observed and normal values is the \emph{total deviation (TD)}. In this package, negative values indicate lower-than-normal sensitivity, following the Humphrey Field Analyzer convention. For perimeters that reverse this definition (e.g., Octopus), users must invert the sign.

To reveal focal defects masked by generalized depression (e.g., due to cataract), a \emph{pattern deviation (PD)} is computed by subtracting a general height (GH) estimate from the TD. For 24-2, GH is defined as the 7th highest TD value.

The package includes three datasets with visual fields from normal observers:

\begin{itemize}
  \item SUNY-IU dataset (\code{vfctrsunyiu_24d2}) for 24-2 with Goldmann size III \citep{IMF:Mar2013b}
  \item Iowa PC26 (\code{vfctriowa_PC26}) and Peri (\code{vfctrsunyiu_10d2}) datasets for Goldmann size V \citep{IMF:Marin2018c}
\end{itemize}

<<>>=
data(fvctrSunyiu24d2)
str(
  vfctrSunyiu24d2[, 1:getlocini()+5], 
  strict.width = "wrap")
@

The normal values derived from these data can be found in \code{normvals}.

<<>>=
data(normvals)
str(
  normvals$sunyiu_24d2, 
  max.level = 1, strict.width = "wrap")
@

The normative object \code{nv} includes coefficients of age-linear models (\code{nv$agem$coeff}).:

<<>>=
nv <- getnv()
head(nv$agem$coeff, 5)
@

It also contains a function that calculates normal sensitivity for a given age (\code{nv$agem$model()}), Thus, the expected field at age 50 is:

<<>>=
age <- 50
nv$agem$model(age)
@

Blind spot locations are returned as \code{NA}.

\subsection{Graphical parameters}

<<>>=
data(gpars)
names(gpars)
str(gpars$p24d2, 
    max.level = 1, strict.width = "wrap")
@

The \code{gpars} object contains graphical parameters for plotting visual fields. The default parameters are set for the 24-2 pattern, but can be customized for other patterns. It contains a list of the coords, which must be identical to the \code{locmap} used for the test. The \code{gpar} object also contains information on how to tesselate the borders in the plots, and color palettes for both the fields and their borders in the visual field plots. 

%% -- Results ------------------------------------------------------------------

\section{Analyzing visual fields} \label{sec:results}

After you have familiarized yourself with the structure of the default data, you will now learn how to use the visual field package to analyze single locations, how to calculate global parameters that summarize the visual field, how plot fields, how to perform longitudinal analyses, and how to do structure-function correlations. Then, in the following section, we will show how to use the package with different patterns and data from different perimeters.

\subsection{Metrics for individual locations}

\subsubsection{Total deviation}

Total deviation is the difference between observed and expected sensitivity. Here, it is shown how it is calculated.

<<>>=
example2 <- vffilter(vfpwgRetest24d2, id == "1", eye == "OD")[1, ]
age <- example2$age[1]
normal_values <- getnv()$agem$model(age)[1:10]
example2[, getvfcols()[1:10]] - normal_values
@

To calculate the total deviation, use the function from the \code{nv} object:

<<>>=
td <- gettd(example2)
td[, getvfcols()[1:10]]
@

\subsubsection{Pattern deviation}

Pattern deviation is obtained by subtracting the general height:

<<>>=
gh <- getgh(td)
pattern_defects <- td[, getvfcols()[1:10]] - gh
@

Or automatically:

<<>>=
pd <- getpd(td)
pd[, getvfcols()[1:10]]
@

\subsubsection{Probability values}

Even healthy eyes may show small deviations. To interpret these values, we calculate the probability that a deviation reflects pathology using empirical distributions from the normative data \citep{IMF:Hei1987a, IMF:Heijl1991}.

<<>>=
getnv()$lut$probs
gettdp(td)[, getvfcols()[1:10]]
getpdp(pd)[, getvfcols()[1:10]]
@

Probabilities less than 0.05 suggest the location is likely abnormal.

\subsection{Global indices}

Global indices summarize the visual field by applying summary statistics on sensitivity, total deviation or pattern deviation. These indices are calculated using \code{getgl()}. The resulting \code{data.frame} also contains the patient's age, eye, and date of the test.

<<>>=
gl <- getgl(example2)
str(gl, max.level = 1, strict.width = "wrap")
gl[, getlocini():ncol(gl)]
@

\begin{description}
  \item [msens]: Mean sensitivity (MS)
  \item [ssens]: SD of sensitivity
  \item [tmd]: Mean total deviation (MD)
  \item [tsd]: SD of total deviation
  \item [pmd]: Mean pattern deviation
  \item [psd]: SD of pattern deviation
  \item [gh]: General height
  \item [vfi]: Visual field index (VFI) \citep{IMF:Ben2008}
\end{description}

Associated probabilities are calculated with \code{getglp()}:

<<>>=
getglp(gl)[, getlocini():ncol(gl)]
@

\subsection{Plotting the visual field}

There are various ways to visualize perimetric data. These visualizations should be interpreted as simplified representations of the hill of vision. Standard displays include color-coded probability maps, graphical representations of the blind spot, and border enhancements that encode diagnostic information. For example, \code{vfplot} with the argument \code{"td"} generates plots that require normative data on differential light sensitivity and the probabilities of deviations from these norms. This information is included for the Humphrey Field Analyzer patterns but must be provided separately for other perimeters.
By convention, when displaying both eyes side-by-side, the left eye appears on the left and the right eye on the right. This reflects the patient's visual fields, with blind spots positioned temporally. This is in contrast to structural imaging, which is typically displayed as viewed by the examiner. It is important to specify the type of data represented in the visual field tables. The default is set to \emph{total deviation} (\code{td}). In the following plot, yellow indicates a probability $<$ 0.05, orange $<$ 0.02, red $<$ 0.01, and dark red $<$ 0.005.

<<fig=TRUE, out.width='.25\\textwidth', out.height='!'>>=

vfplot(example2)

@

A gallery of all available plot types is available at \url{https://rpubs.com/huchzi/1307927}.

\subsection{Longitudinal analyses}

Monitoring visual function over time is a key application of perimetry in managing glaucoma. Sensitivity measurements naturally fluctuate between tests. This variability increases in eyes with glaucoma, especially at affected locations. Hence, two tests showing differences cannot alone indicate progression. Instead, statistical analysis across a series of tests is required to detect significant change. Progression analysis methods fall into two broad categories: \emph{event-based} and \emph{trend-based} approaches. These may further be classified by their reliance on population-based normative data, mathematical models of progression, or model-free methods.

Event-based methods (not implemented in \pkg{visualFields}) compare a test to a baseline and flag change if the sensitivity reduction is unlikely ($p < 0.05$) based on normative variability, and if confirmed in subsequent tests.

Trend-based methods assume slower change and analyze all tests in a series. Though less intuitive for clinicians, these methods are statistically robust and reflect real-world progression patterns.

To illustrate, we select a time series of 27 visual fields from one eye:

<<>>=
example3 <- vffilter(vfpwgSunyiu24d2, id == "sample1" & eye == "OS")
@

\subsubsection{Statistical analysis}

Statistical progression analysis may be performed via:
\begin{itemize}
\item \emph{Global linear regression} (e.g., on MD)
\item \emph{Pointwise linear regression} (PLR)
\end{itemize}

The \code{glr()} function estimates a regression model for global indices. For the example series, the the regression can be calculated as follows:

<<>>=
global_indices <- getgl(example3)
global_linear_regression <- glr(global_indices[,c("date", "tmd")])
str(global_linear_regression)
global_linear_regression$sl
global_linear_regression$pval
@

Pointwise linear regression is performed using \code{plr()}, resulting in one slope and $p$-value per location:

<<>>=
prog1 <- plr(example3)
str(prog1, max.level = 1, strict.width = "wrap")
sum(prog1$pval[-getlocmap()$bs] < 0.05)
@

PLR-based criteria (e.g., 3 or more progressing points) are clinically useful but lack explicit control for specificity. \emph{Permutation of Pointwise Linear Regression (PoPLR)} addresses this by combining the 52 $p$-values into a single $S$-statistic (per Fisher's method) and comparing it to a null distribution from permuted series \citep{IMF:Ole2012,IMF:Marin2021}.

<<>>=
prog2 <- poplr(example3)
str(prog2, max.level = 1, strict.width = "wrap")
@

The null distribution and observed statistic:

<<>>=
summary(prog2)
prog2[c("csr", "csrp", "csl", "cslp")]
@

Visualization:

<<fig=TRUE>>=
ggplot(data.frame(x = prog2$cstats$cslall), aes(x = x)) + 
         geom_histogram() +
         geom_vline(xintercept = prog2$csl, color = "red", size = 1) +
         scale_x_continuous("S-values", breaks = seq(0, 200, 20))
@

\subsubsection{Plotting progression}

Use \code{vfplotplr()} to visualize results from the pointwise linear regression (PLR). In this figure, yellow indicates $p < 0.05$, orange $< 0.02$, red $< 0.01$, and dark red $< 0.005$.

<<fig=TRUE>>=
vfplotplr(example3)
@


Example plots used for monitoring progression are available in the gallery: \url{https://rpubs.com/huchzi/1307927}.

\subsection{Automated reports}

Static reports and Shiny applications can be generated:

<<eval=FALSE>>=
vfsfa(example2, file = "test.pdf")
vfsfashiny(example2)
@

Automated reports can also be generated for progression series:

<<eval = FALSE>>=
vfspa(example3, file = "test.pdf")
vfspashiny(example3)
@

\subsection{Structure-function correlation}

Anatomical modeling aids comparison between structural imaging and functional testing in glaucoma.

The ganglion cell bodies stimulated by a visual field location are displaced from the photoreceptor input region, especially in the central field. This displacement is modeled in \pkg{visualFields} based on Montesano et al. \citep{IMF:Montesano2020}.

<<>>=
locmap <- locmaps$p10d2
gcmap <- vf2gc(locmap$coord)
@

A plot of the 10-2 grid and the displacement of the corresponding ganglion cell bodies:

<<echo=TRUE, fig=TRUE>>=

rbind(data.frame(label = "10-2 grid", locmap$coord), 
      data.frame(label = "Corresponding ganglion cells", gcmap)) |>
        ggplot(aes(x = x, y = y)) +
        geom_point() +
        facet_wrap(~ label) +
  theme_minimal(12) +
  scale_x_continuous("", limits = c(-10, 10)) +
  scale_y_continuous("", limits = c(-10, 10)) +
  guides(x = "none", y = "none") 

@

Nerve fiber paths from each location to the optic disc can also be modeled, using Jansonius' framework \citep{IMF:Jan2009, IMF:Jan2012} with the functions \code{cart2jpolar}, \code{jpolar2cart}, \code{bundlePath}, \code{loc2psi}, and \code{psi2oct}.

\section{Support for other patterns and perimeters}

The best supported alternativ to the 24-2 pattern is the HFA 10-2 pattern. Remember that you must changes other settings along with the \code{locmap}, including the \code{normvals} and the \code{gpar} parameters. Otherwise, the \code{vfplot()} function will throw an error. It is very important that you set up the environment completely (\code{locmap}, \code{nv}, \code{gpar}).

<<fig=TRUE>>=

setlocmap(locmaps$p10d2)
setnv(normvals$sunyiu_10d2)
setgpar(gpars$p10d2)
vfplot(vffilter(vfctrSunyiu10d2, id == 2, eye == "OD"))

@

Remember that you can always reset the environment with...

<<>>=
setdefaults()
@

\subsubsection{Generate normal values}

The locmap will be available online or from the manufacturer. Perimetry conventions vary across manufacturers. The package includes normative data for Humphrey 24-2 (Goldmann III) and Iowa full-field perimetry with Goldmann V \citep{IMF:Marin2018c}. Use \code{nvgenerate()} to build the normative model for a custom dataset. You will need a sufficiently large dataset of normal fields balanced for age in order to create your own norm values.

<<>>=
nv <- nvgenerate(vfctrSunyiu24d2)
setnv(nv)
@

\subsubsection{Support for Octopus perimeters}

Octopus data can be imported with \code{loadoctopus()}. However, no normal values are provided by the package, yet. Detailed examples for exporting data from the Octopus 900 and using \code{loadoctopus()} can be found here: \url{https://huchzi.github.io/vf1/loadOctopus.html}.

%% -- Summary and discussion ---------------------------------------------------

\section{Summary and discussion} \label{sec:summary}

The \pkg{visualFields} package provides a robust suite of tools for statistical analysis and visualization of visual field data. It supports single-field reports, progression analysis, anatomical modeling, and customization for non-standard perimeters. As part of the Open Perimetry Initiative, it aims to foster reproducibility and transparency in perimetry research. Future development could focus on expanding normative datasets, full DICOM integration, and extended support for additional testing strategies and devices.

%% -- Acknowledgements ---------------------------------------------------

\section{Acknowledgments}
The visualField's package would not have existed if it wasn't for the important contribution of many contributors who partially funded the development of the package, and/or contributed datasets, code, and above all insight on visual fields analysis and about perimetry and visual sciences at large. Huge thanks to:
  - William H Swanson
  - Michael Wall
  - Andrew Turpin
  - Paul H Artes
  - Giovanni Montesano
  - Mitchell W Dul

%% -- Bibliography -------------------------------------------------------------

\bibliography{references}

%% -- Appendix (if any) --------------------------------------------------------
%% - After the bibliography with page break.
%% - With proper section titles and _not_ just "Appendix".

%% -----------------------------------------------------------------------------


\end{document}
